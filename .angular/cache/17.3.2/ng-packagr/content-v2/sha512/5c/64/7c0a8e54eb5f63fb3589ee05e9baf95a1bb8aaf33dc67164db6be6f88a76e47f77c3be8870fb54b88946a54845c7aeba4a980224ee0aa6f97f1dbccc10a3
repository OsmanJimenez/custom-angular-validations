{"hash":"416d077b6de2524d8884f3e735166e8381c18a51","fesm2022":[{"exports":["NgxValidationsService"],"facadeModuleId":"C:\\Users\\Osman Jimenez\\Documents\\Git\\custom-angular-validations\\dist\\ngx-validations\\esm2022\\ngx-validations.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["C:\\Users\\Osman Jimenez\\Documents\\Git\\custom-angular-validations\\dist\\ngx-validations\\esm2022\\lib\\ngx-validations.service.mjs","C:\\Users\\Osman Jimenez\\Documents\\Git\\custom-angular-validations\\dist\\ngx-validations\\esm2022\\public-api.mjs","C:\\Users\\Osman Jimenez\\Documents\\Git\\custom-angular-validations\\dist\\ngx-validations\\esm2022\\ngx-validations.mjs"],"name":"ngx-validations","type":"chunk","dynamicImports":[],"fileName":"ngx-validations.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["*","Injectable"]},"imports":["@angular/core"],"modules":{"C:\\Users\\Osman Jimenez\\Documents\\Git\\custom-angular-validations\\dist\\ngx-validations\\esm2022\\lib\\ngx-validations.service.mjs":{"code":"class NgxValidationsService {\n    constructor() {\n        this.pattern = new RegExp('^[a-zA-ZñÑáéíóúÁÉÍÓÚs ]+$');\n        this.onlyLetters = new RegExp('^[a-zA-ZñÑáéíóúÁÉÍÓÚs ]+$');\n        this.onlyEmail = new RegExp('^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$');\n        this.onlyPassword = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@,+()-.$!%*?&¡¿#\"´`¨°¬\\':;{}<=>\\\\\\\\~|^/_[\\\\]])[A-Za-z\\\\d@,+()-.$!¿%*?&¡#\"´`¨°¬\\':;{}<=>\\\\\\\\~|^/_[\\\\]]{6,}$');\n        this.onlyNumber = new RegExp(/^([0-9])*$/);\n        this.anyText = new RegExp('^[_A-Za-z0-9-ZñÑáéíóúÁÉÍÓÚs@,+()-.$≥!%*?&/¡¿#\"´`¨°¬\\':;{}<=> ]+$');\n        this.onlyNumbersText = new RegExp('^[A-Za-z0-9ZñÑáéíóúÁÉÍÓÚ]+$');\n        this.minOne = new RegExp(/^([1-9])*$/);\n    }\n    Validation(min, max, option, requerid) {\n        const pattern = {\n            onlyLetter: this.onlyLetters,\n            onlyEmail: this.onlyEmail,\n            onlyPassword: this.onlyPassword,\n            onlyNumber: this.onlyNumber,\n            minOne: this.minOne,\n            onlyNumbersText: this.onlyNumbersText,\n            anyText: this.anyText,\n        }[option];\n        return (control) => {\n            if (requerid == false &&\n                control.value != null &&\n                control.value.length == 0) {\n                return null;\n            }\n            else if (control.value != null && control.value.length == 0) {\n                return { nameRequerid: true };\n            }\n            else if (!pattern) {\n                return { invalidPattern: true };\n            }\n            else if (!pattern.test(control.value)) {\n                return { [option]: true };\n            }\n            else if (control.value != null && control.value.length <= min) {\n                return { nameNumberMin: true, min };\n            }\n            else if (control.value != null && control.value.length >= max) {\n                return { nameNumberMax: true, max };\n            }\n            return null;\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.1\", ngImport: i0, type: NgxValidationsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.1\", ngImport: i0, type: NgxValidationsService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.1\", ngImport: i0, type: NgxValidationsService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [] });","originalLength":8350,"removedExports":[],"renderedExports":["NgxValidationsService"],"renderedLength":2655},"C:\\Users\\Osman Jimenez\\Documents\\Git\\custom-angular-validations\\dist\\ngx-validations\\esm2022\\public-api.mjs":{"code":"/*\n * Public API Surface of ngx-validations\n */","originalLength":557,"removedExports":[],"renderedExports":[],"renderedLength":47},"C:\\Users\\Osman Jimenez\\Documents\\Git\\custom-angular-validations\\dist\\ngx-validations\\esm2022\\ngx-validations.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":516,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\nclass NgxValidationsService {\n    constructor() {\n        this.pattern = new RegExp('^[a-zA-ZñÑáéíóúÁÉÍÓÚs ]+$');\n        this.onlyLetters = new RegExp('^[a-zA-ZñÑáéíóúÁÉÍÓÚs ]+$');\n        this.onlyEmail = new RegExp('^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$');\n        this.onlyPassword = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@,+()-.$!%*?&¡¿#\"´`¨°¬\\':;{}<=>\\\\\\\\~|^/_[\\\\]])[A-Za-z\\\\d@,+()-.$!¿%*?&¡#\"´`¨°¬\\':;{}<=>\\\\\\\\~|^/_[\\\\]]{6,}$');\n        this.onlyNumber = new RegExp(/^([0-9])*$/);\n        this.anyText = new RegExp('^[_A-Za-z0-9-ZñÑáéíóúÁÉÍÓÚs@,+()-.$≥!%*?&/¡¿#\"´`¨°¬\\':;{}<=> ]+$');\n        this.onlyNumbersText = new RegExp('^[A-Za-z0-9ZñÑáéíóúÁÉÍÓÚ]+$');\n        this.minOne = new RegExp(/^([1-9])*$/);\n    }\n    Validation(min, max, option, requerid) {\n        const pattern = {\n            onlyLetter: this.onlyLetters,\n            onlyEmail: this.onlyEmail,\n            onlyPassword: this.onlyPassword,\n            onlyNumber: this.onlyNumber,\n            minOne: this.minOne,\n            onlyNumbersText: this.onlyNumbersText,\n            anyText: this.anyText,\n        }[option];\n        return (control) => {\n            if (requerid == false &&\n                control.value != null &&\n                control.value.length == 0) {\n                return null;\n            }\n            else if (control.value != null && control.value.length == 0) {\n                return { nameRequerid: true };\n            }\n            else if (!pattern) {\n                return { invalidPattern: true };\n            }\n            else if (!pattern.test(control.value)) {\n                return { [option]: true };\n            }\n            else if (control.value != null && control.value.length <= min) {\n                return { nameNumberMin: true, min };\n            }\n            else if (control.value != null && control.value.length >= max) {\n                return { nameNumberMax: true, max };\n            }\n            return null;\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.1\", ngImport: i0, type: NgxValidationsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.1\", ngImport: i0, type: NgxValidationsService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.1\", ngImport: i0, type: NgxValidationsService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [] });\n\n/*\n * Public API Surface of ngx-validations\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxValidationsService };\n//# sourceMappingURL=ngx-validations.mjs.map\n","map":null,"preliminaryFileName":"ngx-validations.mjs","sourcemapFileName":"ngx-validations.mjs.map"},{"fileName":"ngx-validations.mjs.map","needsCodeReference":false,"source":"{\"version\":3,\"file\":\"ngx-validations.mjs\",\"sources\":[\"../../../projects/ngx-validations/src/lib/ngx-validations.service.ts\",\"../../../projects/ngx-validations/src/public-api.ts\",\"../../../projects/ngx-validations/src/ngx-validations.ts\"],\"sourcesContent\":[\"import { Injectable } from '@angular/core';\\r\\nimport { AbstractControl } from '@angular/forms';\\r\\n\\r\\n@Injectable({\\r\\n  providedIn: 'root'\\r\\n})\\r\\nexport class NgxValidationsService {\\r\\n  pattern = new RegExp('^[a-zA-ZñÑáéíóúÁÉÍÓÚs ]+$');\\r\\n  onlyLetters = new RegExp('^[a-zA-ZñÑáéíóúÁÉÍÓÚs ]+$');\\r\\n  onlyEmail = new RegExp(\\r\\n    '^[_A-Za-z0-9-\\\\\\\\+]+(\\\\\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\\\\\.[A-Za-z0-9]+)*(\\\\\\\\.[A-Za-z]{2,})$'\\r\\n  );\\r\\n  onlyPassword = new RegExp(\\r\\n    '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\\\\\d)(?=.*[@,+()-.$!%*?&¡¿#\\\"´`¨°¬\\\\':;{}<=>\\\\\\\\\\\\\\\\~|^/_[\\\\\\\\]])[A-Za-z\\\\\\\\d@,+()-.$!¿%*?&¡#\\\"´`¨°¬\\\\':;{}<=>\\\\\\\\\\\\\\\\~|^/_[\\\\\\\\]]{6,}$'\\r\\n  );\\r\\n  onlyNumber = new RegExp(/^([0-9])*$/);\\r\\n  anyText = new RegExp(\\r\\n    '^[_A-Za-z0-9-ZñÑáéíóúÁÉÍÓÚs@,+()-.$≥!%*?&/¡¿#\\\"´`¨°¬\\\\':;{}<=> ]+$'\\r\\n  );\\r\\n  onlyNumbersText = new RegExp('^[A-Za-z0-9ZñÑáéíóúÁÉÍÓÚ]+$');\\r\\n  minOne = new RegExp(/^([1-9])*$/);\\r\\n\\r\\n  constructor() { }\\r\\n\\r\\n  Validation(min: number, max: number, option: string, requerid?: boolean) {\\r\\n    const pattern = {\\r\\n      onlyLetter: this.onlyLetters,\\r\\n      onlyEmail: this.onlyEmail,\\r\\n      onlyPassword: this.onlyPassword,\\r\\n      onlyNumber: this.onlyNumber,\\r\\n      minOne: this.minOne,\\r\\n      onlyNumbersText: this.onlyNumbersText,\\r\\n      anyText: this.anyText,\\r\\n    }[option];\\r\\n\\r\\n    return (control: AbstractControl): any | null => {\\r\\n      if (\\r\\n        requerid == false &&\\r\\n        control.value != null &&\\r\\n        control.value.length == 0\\r\\n      ) {\\r\\n        return null;\\r\\n      } else if (control.value != null && control.value.length == 0) {\\r\\n        return { nameRequerid: true };\\r\\n      } else if (!pattern) {\\r\\n        return { invalidPattern: true };\\r\\n      } else if (!pattern.test(control.value)) {\\r\\n        return { [option]: true };\\r\\n      } else if (control.value != null && control.value.length <= min) {\\r\\n        return { nameNumberMin: true, min };\\r\\n      } else if (control.value != null && control.value.length >= max) {\\r\\n        return { nameNumberMax: true, max };\\r\\n      }\\r\\n\\r\\n      return null;\\r\\n    };\\r\\n  }\\r\\n}\\r\\n\",\"/*\\r\\n * Public API Surface of ngx-validations\\r\\n */\\r\\n\\r\\nexport * from './lib/ngx-validations.service';\\r\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[],\"mappings\":\"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\"}","type":"asset"}]}